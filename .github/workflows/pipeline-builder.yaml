name: Build and Test .NET

on: 
  pull_request:
  
jobs:
  build-test-lint-security:
    name: Build, Test, Lint and Security Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repo
      uses: actions/checkout@v3

    # Setup .NET Core SDK
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.0.x'

    # Cache NuGet Packages
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/NuGetLockFile.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    # Restore NuGet Packages
    - name: Restore NuGet packages
      run: dotnet restore

    # Build
    - name: Build
      run: dotnet build --configuration Release --no-restore

    # Test
    - name: Test
      run: dotnet test --no-restore --collect:"XPlat Code Coverage"

    # Publish Test Results
    - name: Publish Test Results
      if: always() # ensures this step runs even if previous steps fail
      uses: dorny/test-reporter@v2
      with:
        name: Publish Test Results
        path: '**/*Tests/TestResults/TestResults.xml'
        reporter: dotnet-trx
        fail-if-no-test-files-found: false

    # Publish Test Coverage
    # Assuming you have already setup coverlet.collector in your test projects to output Cobertura format
    - name: Publish Test Coverage
      if: always() # ensures this step runs even if previous steps fail
      uses: coverallsapp/github-action@master
      with:
        path-to-lcov: './**/coverage.cobertura.xml'
        github-token: ${{ secrets.GITHUB_TOKEN }}

    # Lint using .NET Format
    - name: Install .NET Format tool
      run: dotnet tool install -g dotnet-format

    - name: Run .NET Format (Lint)
      run: dotnet format --check

    - name: Publish Lint Results
      uses: wearerequired/lint-action@v3.0.0
      with:
        github_token: ${{ secrets.github_token }}
        check_name: .NET Format Lint Results
        eslint: false

    # Security Analysis
    - name: Install Security Code Scan tool
      run: dotnet tool install --global security-scan

    - name: Run Security Code Scan
      run: security-scan

    - name: Publish Security Analysis Results
      uses: actions/upload-artifact@v3
      with:
        name: Security Scan Report
        path: SecurityCodeScanReport.xml