name: C# CI Workflow

on: [push, workflow_dispatch]

env:
  DOTNET_VERSION: 2.0.9 # Set the version to the latest patch for 2.x runtime

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test and Collect Coverage
        run: |
          dotnet add package coverlet.msbuild
          dotnet test --no-restore /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura

      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: 'Test Results'
          path: '**/TestResults/*.xml'
          reporter: 'dotnet-trx'

      - name: Publish Code Coverage Results
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool
          reportgenerator "-reports:**/coverage.cobertura.xml" "-targetdir:coveragereport" -reporttypes:"Cobertura" &&
          reportgenerator "-reports:**/coveragereport/Cobertura.xml" "-targetdir:coveragereport" -reporttypes:"MarkdownSummary"

      - name: Add Code Coverage Comment to PR
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          path: coveragereport/Summary.md

  lint-and-security:
    name: Static analysis and security checks
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
        
      # Linting is more challenging with .NET Core 2.0, as it lacks built-in "dotnet format" tools
      # Here, you might use third-party linters like StyleCop, which need to be set up separately

      # For SAST and vulnerability checks, placeholder actions are used, and these should
      # be replaced with .NET Core 2.0 compatible tools.

      - name: Run Security Analysis
        run: echo 'Security analysis tools need to be integrated here'

      - name: Check for Vulnerabilities
        run: echo 'Integrate a .NET Core 2.0 compatible vulnerability scanner'
